Modulo 3

 COMANDOS USADOS PRACTICA 1


# Entrar como superusuario
sudo su

# Editar el archivo de configuración de GRUB
nano /etc/default/grub

# Dentro del archivo, dejar estas líneas (revisar la sintaxis correcta):

GRUB_DEFAULT=0
GRUB_TIMEOUT_STYLE=hidden
GRUB_TIMEOUT=20
GRUB_DISTRIBUTOR=$(. /etc/os-release; echo ${NAME:-Ubuntu})
GRUB_CMDLINE_LINUX_DEFAULT=""
GRUB_CMDLINE_LINUX=""

# Guardar cambios en nano:
# CTRL + O (guardar)
# ENTER (confirmar)
# CTRL + X (salir)

# Limpiar pantalla (opcional)
clear

# Actualizar la configuración del GRUB
update-grub

# Reiniciar el sistema
reboot

# --- DESPUÉS DE REINICIAR ---

# (Opcional) volver a ajustar el timeout a 0 si deseas:

sudo su
nano /etc/default/grub

# Modificar estas líneas:

GRUB_DEFAULT=0
GRUB_TIMEOUT_STYLE=hidden
GRUB_TIMEOUT=0
GRUB_DISTRIBUTOR=$(. /etc/os-release; echo ${NAME:-Ubuntu})
GRUB_CMDLINE_LINUX_DEFAULT=""
GRUB_CMDLINE_LINUX=""

# Guardar cambios:
# CTRL + O
# ENTER
# CTRL + X

# Reiniciar nuevamente:
reboot

# --- EN EL ARRANQUE ---

# Presionar SHIFT (si BIOS) o ESC (si UEFI) para abrir el GRUB

# Seleccionar:
# Ubuntu, with Linux 6.8.0-60-generic (recovery mode)
# ENTER

# En el Recovery Menu, seleccionar:
# Drop to root shell prompt
# ENTER

# Remontar el sistema de archivos en modo lectura-escritura
mount -o remount,rw /

# Cambiar la contraseña de root
passwd root

# (Escribir la nueva contraseña cuando lo solicite)

# Reiniciar el sistema
reboot

**************************************************************************************

 COMANDOS USADOS PRACTICA 2

# -----------------------------------------
# SINTAXIS BÁSICA DE UN SCRIPT EN BASH
# -----------------------------------------
# 1. Primera línea (shebang) para indicar intérprete:
#    #!/bin/bash
#
# 2. Variables:
#    VAR="texto"
#    VAR=$(comando)
#
# 3. Pedir datos:
#    read -p "Mensaje: " VAR
#
# 4. Imprimir datos:
#    echo "texto"
#
# 5. Guardar script:
#    nano script.sh → escribir contenido
#    CTRL+O → ENTER → CTRL+X
#
# 6. Dar permisos de ejecución:
#    chmod +x script.sh
#
# 7. Ejecutar:
#    ./script.sh
# -----------------------------------------

# ========== SCRIPT 1: BACKUP ==========
nano back.sh

# Contenido:
#!/bin/bash
USUARIO="$(whoami)"
FECHA="$(date +'%Y-%m-%d_%H-%M')"

tar -czvf "/home/$USUARIO/bak_${FECHA}.tar.gz" "/home/$USUARIO"
echo "Backup OK: /home/$USUARIO/bak_${FECHA}.tar.gz"

# Guardar y salir: CTRL+O, ENTER, CTRL+X

# Dar permisos y ejecutar:
chmod +x back.sh
./back.sh

# Verificar archivo creado:
ls -lh ~
# Ver contenido del backup:
tar -tzvf bak_YYYY-MM-DD_HH-MM.tar.gz

# ========== SCRIPT 2: GUARDAR CONFIGURACIÓN DE RED ==========
nano ifconfig1.sh

# Contenido:
#!/bin/bash
USUARIO="$(whoami)"
RUTA="/home/$USUARIO/Desktop"
mkdir -p "$RUTA"

read -p "Ingrese nombre de archivo: " NOMBRE
ifconfig > "$RUTA/${NOMBRE}.txt"
echo "Guardado en: $RUTA/${NOMBRE}.txt"

# Guardar y salir: CTRL+O, ENTER, CTRL+X

# Dar permisos y ejecutar:
chmod +x ifconfig1.sh
./ifconfig1.sh

# Verificar archivo creado:
cd ~/Desktop
ls -lh
cat NOMBRE_QUE_PUSISTE.txt


*****************************************************************************************

COMANDOS USADOS PRACTICA 3


# --- PASO 1: Configuración de la VM en modo Bridge ---

# (Este paso es en VirtualBox, no lleva código, pero lo documentamos igual)
# - Apagar la VM
# - Ir a Configuración → Red → Adaptador 1 → Modo: Adaptador Puente (Bridged Adapter)
# - Seleccionar la tarjeta de red física real (Wi-Fi o Ethernet)
# - Guardar y encender la VM

# --- PASO 2: Habilitar el ping en Windows ---

# Abrir PowerShell como administrador y ejecutar:
netsh advfirewall firewall add rule name="ICMP Allow incoming V4 echo request" protocol=icmpv4:8,any dir=in action=allow

# En Ubuntu Server: Ver la IP de la VM
ip addr

# Desde Windows probar conectividad (ejemplo, usando la IP que te dio Ubuntu):
ping 10.0.0.154

# --- PASO 3: Instalar y activar SSH en Ubuntu ---

sudo apt update
sudo apt install -y openssh-server
sudo systemctl enable ssh
sudo systemctl start ssh
sudo systemctl status ssh

# --- PASO 4: Probar SSH inicial con contraseña ---

# Desde Windows (PowerShell o CMD):
ssh michael20250845@10.0.0.154

# Te pedirá contraseña de tu usuario de Ubuntu Server.

# --- PASO 5: Generar claves RSA desde Windows ---

# En PowerShell:
ssh-keygen -t rsa -b 4096 -f $env:USERPROFILE\.ssh\id_rsa_vm

# Cuando pida passphrase, presionar ENTER dos veces.
# Genera:
# - id_rsa_vm (clave privada)
# - id_rsa_vm.pub (clave pública)

# --- PASO 6: Copiar clave pública a Ubuntu ---

# Desde PowerShell en Windows:
type $env:USERPROFILE\.ssh\id_rsa_vm.pub |
  ssh michael20250845@10.0.0.154 `
    "mkdir -p ~/.ssh; cat >> ~/.ssh/authorized_keys; chmod 700 ~/.ssh; chmod 600 ~/.ssh/authorized_keys"

ssh -i $env:USERPROFILE\.ssh\id_rsa_vm michael20250845@10.0.0.154

# --- PASO 7: Verificar configuración SSH en Ubuntu ---

# Editar archivo de configuración de SSH:
sudo nano /etc/ssh/sshd_config

# Asegurarse que estén estas líneas (descomentadas o agregadas):
PubkeyAuthentication yes
AuthorizedKeysFile .ssh/authorized_keys

# Guardar: CTRL+O → ENTER → CTRL+X

# Reiniciar el servicio SSH:
sudo systemctl restart ssh

# --- PASO 8: Probar conexión SSH sin contraseña ---

# Desde Windows:
ssh -i "$env:USERPROFILE\.ssh\id_rsa_vm" michael20250845@10.0.0.154

# Si todo está bien: accede sin pedir clave
